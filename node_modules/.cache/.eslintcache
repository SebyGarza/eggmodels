[{"/Users/sebygarza/Documents/portfolio/eggmodels/src/index.js":"1","/Users/sebygarza/Documents/portfolio/eggmodels/src/App.js":"2","/Users/sebygarza/Documents/portfolio/eggmodels/src/reportWebVitals.js":"3","/Users/sebygarza/Documents/portfolio/eggmodels/src/components/Content.js":"4","/Users/sebygarza/Documents/portfolio/eggmodels/src/components/NavBar.js":"5","/Users/sebygarza/Documents/portfolio/eggmodels/src/components/Blog.js":"6","/Users/sebygarza/Documents/portfolio/eggmodels/src/components/Rankings.js":"7","/Users/sebygarza/Documents/portfolio/eggmodels/src/components/Parlay.js":"8","/Users/sebygarza/Documents/portfolio/eggmodels/src/components/ScheduleNFL.js":"9","/Users/sebygarza/Documents/portfolio/eggmodels/src/components/Playoffs.js":"10"},{"size":535,"mtime":1694630266237,"results":"11","hashOfConfig":"12"},{"size":416,"mtime":1695076250035,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":1694630266238,"results":"14","hashOfConfig":"12"},{"size":662,"mtime":1706835576776,"results":"15","hashOfConfig":"12"},{"size":1194,"mtime":1706835585293,"results":"16","hashOfConfig":"12"},{"size":1632,"mtime":1695278224217,"results":"17","hashOfConfig":"12"},{"size":4054,"mtime":1708989996307,"results":"18","hashOfConfig":"12"},{"size":4903,"mtime":1706835601874,"results":"19","hashOfConfig":"12"},{"size":3398,"mtime":1706835410541,"results":"20","hashOfConfig":"12"},{"size":2729,"mtime":1703546637104,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"89ofqh",{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/sebygarza/Documents/portfolio/eggmodels/src/index.js",[],[],"/Users/sebygarza/Documents/portfolio/eggmodels/src/App.js",[],[],"/Users/sebygarza/Documents/portfolio/eggmodels/src/reportWebVitals.js",[],[],"/Users/sebygarza/Documents/portfolio/eggmodels/src/components/Content.js",[],[],"/Users/sebygarza/Documents/portfolio/eggmodels/src/components/NavBar.js",[],[],"/Users/sebygarza/Documents/portfolio/eggmodels/src/components/Blog.js",[],[],"/Users/sebygarza/Documents/portfolio/eggmodels/src/components/Rankings.js",["54"],[],"import React, { useEffect, useState } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport nflModel from '../python/nflModel.json';\nimport Chart from 'chart.js/auto';\nimport '../Rankings.css';\n\n// Define a dictionary to map team names to their main colors\nconst teamColors = {\n  'Cardinals': '#97233F',\n  'Falcons': '#A71930',\n  'Ravens': '#241773',\n  'Bills': '#00338D',\n  'Panthers': '#0085CA',\n  'Bears': '#0B162A',\n  'Bengals': '#FB4F14',\n  'Browns': '#311D00',\n  'Cowboys': '#041E42',\n  'Broncos': '#FB4F14',\n  'Lions': '#0076B6',\n  'Packers': '#203731',\n  'Texans': '#03202F',\n  'Colts': '#002C5F',\n  'Jaguars': '#006778',\n  'Chiefs': '#E31837',\n  'Raiders': '#000000',\n  'Chargers': '#002A5E',\n  'Rams': '#003594',\n  'Dolphins': '#008E97',\n  'Vikings': '#4F2683',\n  'Patriots': '#002244',\n  'Saints': '#D3BC8D',\n  'Giants': '#0B2265',\n  'Jets': '#125740',\n  'Eagles': '#004C54',\n  'Steelers': '#FFB612',\n  '49ers': '#AA0000',\n  'Seahawks': '#002244',\n  'Buccaneers': '#D50A0A',\n  'Titans': '#0C2340',\n  'Commanders': '#773141',\n};\n\nconst Rankings = () => {\n  const [teamEloData, setTeamEloData] = useState({\n    labels: [],\n    datasets: [],\n  });\n\n  useEffect(() => {\n    const labels = [];\n    const teamDatasets = {};\n\n    // Extract all unique team names from the JSON data\n    const teamNames = [...new Set(nflModel.map((game) => game.Home))];\n\n    // Create a dataset for each team\n    teamNames.forEach((teamName) => {\n      const teamEloRatings = [];\n      const teamGames = nflModel.filter(\n        (game) => game.Home === teamName || game.Away === teamName\n      );\n\n      teamGames.forEach((game) => {\n        const week = game.Week;\n        labels.push(`Week ${week}`);\n        const teamElo = game.Home === teamName ? game.ElopreH : game.ElopreA;\n        teamEloRatings.push(teamElo);\n      });\n\n      // Get the main color for the team from the dictionary\n      const color = teamColors[teamName] || getRandomColor();\n\n      // Create a dataset for the team\n      teamDatasets[teamName] = {\n        label: `${teamName}`,\n        data: teamEloRatings,\n        borderColor: color,\n        fill: false,\n      };\n    });\n\n    setTeamEloData({\n      labels: [...new Set(labels)], // Remove duplicates from labels\n      datasets: Object.values(teamDatasets), // Convert the object of datasets to an array\n    });\n  }, []);\n\n  // Function to generate a random color if a team's color is not defined\n  const getRandomColor = () => {\n    const letters = '0123456789ABCDEF';\n    let color = '#';\n    for (let i = 0; i < 6; i++) {\n      color += letters[Math.floor(Math.random() * 16)];\n    }\n    return color;\n  };\n\n  return (\n    <div className='rankings'>\n      <h1>NFL Elo Ratings</h1>\n      <Line\n        data={teamEloData}\n        options={{\n          maintainAspectRatio: false,\n          scales: {\n            x: {\n              grid: {\n                color: 'grey',\n              },\n              beginAtZero: true,\n              autoSkip: false, // Prevent Chart.js from automatically skipping labels\n              maxTicksLimit: 22, // Set a limit to the maximum number of ticks on the x-axis\n              ticks: {\n                callback: function(val, index) {\n                  // Return a label for every tick, ensuring week 10 is included\n                  return `Week ${index + 1}`;\n                },\n                color: 'black',\n              },\n            },\n            y: {\n              beginAtZero: true,\n              grid: {\n                color: 'grey',\n              },\n              min: 1275,\n              max: 1775,\n              ticks: {\n                color: 'black',\n                stepSize: 25,\n              },\n            },\n          },\n          plugins: {\n            legend: {\n              display: true,\n              labels: {\n                font: {\n                  size: 14,\n                  family: 'Space Mono',\n                  color: '#000',\n                },\n              },\n            },\n          },\n        }}\n      />\n    </div>\n  );\n};\n\nexport default Rankings;","/Users/sebygarza/Documents/portfolio/eggmodels/src/components/Parlay.js",["55","56"],[],"import React, { useState, useEffect } from 'react';\nimport '../Parlay.css';\nimport nflScheduleData from '../python/nflModel.json';\n\nconst Parlay = ({ activeTab }) => {\n    const [selectedWinners, setSelectedWinners] = useState([]);\n    const [week, setWeek] = useState(22); // Set the specific week you want to display.\n\n    const handleWinnerSelection = (gameId, team, index) => {\n        setSelectedWinners((prevSelectedWinners) => {\n            const updatedWinners = [...prevSelectedWinners];\n            updatedWinners[index] = updatedWinners[index]?.team === team ? null : { gameId, team };\n            return updatedWinners;\n        });\n    };\n\n    const calculateParlayOdds = () => {\n        let odds = 1;\n\n        for (let index = 0; index < selectedWinners.length; index++) {\n            const selection = selectedWinners[index];\n            if (selection) {\n                const { team } = selection;\n                const game = nflScheduleData.find(\n                    (game) => game.Week === week && (team === game.Away || team === game.Home)\n                );\n                if (game) {\n                    odds *= team === game.Away ? game.probA : game.probH;\n                }\n            }\n        }\n\n        if (odds <= 0.5) {\n            odds = (100 / odds) - 100;\n        } else if (odds === 1) {\n            return null;\n        } else {\n            odds = -(odds * 100) / (1 - odds);\n        }\n\n        const sign = odds >= 0 ? '+' : '-';\n\n        if (sign === '-') {\n            return Math.round(odds);\n        }\n\n        return `${sign}` + Math.round(odds);\n    };\n\n    useEffect(() => {\n        const odds = calculateParlayOdds();\n        console.log(odds);\n    }, [selectedWinners, week]);\n\n    return (\n        <div className='parley'>\n            <h1>Week {week}</h1>\n            <h3>Selected Winners:</h3>\n            <ul className='selected-winners'>\n                {selectedWinners\n                    .filter(selection => selection)\n                    .map((selection, index) => (\n                        <li key={index}>\n                            {selection.team}\n                        </li>\n                    ))}\n            </ul>\n            <h3>Fair Odds: {calculateParlayOdds()}</h3>\n            <div className='parley-container'>\n                <table className=\"games-table\">\n                    {nflScheduleData\n                        .filter((game) => game.Week === week)\n                        .map((game, index) => (\n                            <tr key={index}>\n                                <td className=\"left-column\">\n                                    <input\n                                        type=\"checkbox\"\n                                        value={game.Away}\n                                        onChange={() => handleWinnerSelection(game.id, game.Away, index)}\n                                        checked={\n                                            selectedWinners[index] &&\n                                            selectedWinners[index].gameId === game.id &&\n                                            selectedWinners[index].team === game.Away\n                                        }\n                                    />\n                                    <img\n                                        className=\"team-logo\"\n                                        src={require(`../logosnfl/${game.Away}.png`)}\n                                        alt={`${game.Away} Logo`}\n                                    />\n                                    {game.Away}\n                                </td>\n                                <td className=\"separator\">@</td>\n                                <td className=\"right-column\">\n                                    <img\n                                        className=\"team-logo\"\n                                        src={require(`../logosnfl/${game.Home}.png`)}\n                                        alt={`${game.Home} Logo`}\n                                    />\n                                    {game.Home}\n                                    <input\n                                        type=\"checkbox\"\n                                        value={game.Home}\n                                        onChange={() => handleWinnerSelection(game.id, game.Home, index)}\n                                        checked={\n                                            selectedWinners[index] &&\n                                            selectedWinners[index].gameId === game.id &&\n                                            selectedWinners[index].team === game.Home\n                                        }\n                                    />\n                                </td>\n                            </tr>\n                        ))}\n                </table>\n            </div>\n        </div>\n    );\n};\n\nexport default Parlay;\n","/Users/sebygarza/Documents/portfolio/eggmodels/src/components/ScheduleNFL.js",[],[],"/Users/sebygarza/Documents/portfolio/eggmodels/src/components/Playoffs.js",[],[],{"ruleId":"57","severity":1,"message":"58","line":4,"column":8,"nodeType":"59","messageId":"60","endLine":4,"endColumn":13},{"ruleId":"57","severity":1,"message":"61","line":7,"column":18,"nodeType":"59","messageId":"60","endLine":7,"endColumn":25},{"ruleId":"62","severity":1,"message":"63","line":53,"column":8,"nodeType":"64","endLine":53,"endColumn":31,"suggestions":"65"},"no-unused-vars","'Chart' is defined but never used.","Identifier","unusedVar","'setWeek' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'calculateParlayOdds'. Either include it or remove the dependency array.","ArrayExpression",["66"],{"desc":"67","fix":"68"},"Update the dependencies array to be: [calculateParlayOdds, selectedWinners, week]",{"range":"69","text":"70"},[1696,1719],"[calculateParlayOdds, selectedWinners, week]"]