[{"/Users/sebygarza/portfolio/eggmodels/src/index.js":"1","/Users/sebygarza/portfolio/eggmodels/src/App.js":"2","/Users/sebygarza/portfolio/eggmodels/src/reportWebVitals.js":"3","/Users/sebygarza/portfolio/eggmodels/src/components/Content.js":"4","/Users/sebygarza/portfolio/eggmodels/src/components/NavBar.js":"5","/Users/sebygarza/portfolio/eggmodels/src/components/Blog.js":"6","/Users/sebygarza/portfolio/eggmodels/src/components/ScheduleNFL.js":"7","/Users/sebygarza/portfolio/eggmodels/src/components/Parlay.js":"8","/Users/sebygarza/portfolio/eggmodels/src/components/Rankings.js":"9"},{"size":535,"mtime":1694630266237,"results":"10","hashOfConfig":"11"},{"size":416,"mtime":1695076250035,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":1694630266238,"results":"13","hashOfConfig":"11"},{"size":546,"mtime":1695843118890,"results":"14","hashOfConfig":"11"},{"size":1009,"mtime":1695931577477,"results":"15","hashOfConfig":"11"},{"size":1632,"mtime":1695278224217,"results":"16","hashOfConfig":"11"},{"size":3397,"mtime":1696372636123,"results":"17","hashOfConfig":"18"},{"size":5274,"mtime":1696964341757,"results":"19","hashOfConfig":"18"},{"size":3860,"mtime":1696021620860,"results":"20","hashOfConfig":"11"},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1e14r8v",{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"thvjfa",{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},"/Users/sebygarza/portfolio/eggmodels/src/index.js",[],[],"/Users/sebygarza/portfolio/eggmodels/src/App.js",[],[],"/Users/sebygarza/portfolio/eggmodels/src/reportWebVitals.js",[],[],"/Users/sebygarza/portfolio/eggmodels/src/components/Content.js",[],[],"/Users/sebygarza/portfolio/eggmodels/src/components/NavBar.js",[],[],"/Users/sebygarza/portfolio/eggmodels/src/components/Blog.js",[],[],"/Users/sebygarza/portfolio/eggmodels/src/components/ScheduleNFL.js",[],[],"/Users/sebygarza/portfolio/eggmodels/src/components/Parlay.js",["49","50"],[],"/Users/sebygarza/portfolio/eggmodels/src/components/Rankings.js",["51"],[],"import React, { useEffect, useState } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport nflModel from '../python/nflModel.json';\nimport Chart from 'chart.js/auto';\nimport '../Rankings.css';\n\n// Define a dictionary to map team names to their main colors\nconst teamColors = {\n  'Cardinals': '#97233F',\n  'Falcons': '#A71930',\n  'Ravens': '#241773',\n  'Bills': '#00338D',\n  'Panthers': '#0085CA',\n  'Bears': '#0B162A',\n  'Bengals': '#FB4F14',\n  'Browns': '#311D00',\n  'Cowboys': '#041E42',\n  'Broncos': '#FB4F14',\n  'Lions': '#0076B6',\n  'Packers': '#203731',\n  'Texans': '#03202F',\n  'Colts': '#002C5F',\n  'Jaguars': '#006778',\n  'Chiefs': '#E31837',\n  'Raiders': '#000000',\n  'Chargers': '#002A5E',\n  'Rams': '#003594',\n  'Dolphins': '#008E97',\n  'Vikings': '#4F2683',\n  'Patriots': '#002244',\n  'Saints': '#D3BC8D',\n  'Giants': '#0B2265',\n  'Jets': '#125740',\n  'Eagles': '#004C54',\n  'Steelers': '#FFB612',\n  '49ers': '#AA0000',\n  'Seahawks': '#002244',\n  'Buccaneers': '#D50A0A',\n  'Titans': '#0C2340',\n  'Commanders': '#773141',\n};\n\nconst Rankings = () => {\n  const [teamEloData, setTeamEloData] = useState({\n    labels: [],\n    datasets: [],\n  });\n\n  useEffect(() => {\n    const labels = [];\n    const teamDatasets = {};\n\n    // Extract all unique team names from the JSON data\n    const teamNames = [...new Set(nflModel.map((game) => game.Home))];\n\n    // Create a dataset for each team\n    teamNames.forEach((teamName) => {\n      const teamEloRatings = [];\n      const teamGames = nflModel.filter(\n        (game) => game.Home === teamName || game.Away === teamName\n      );\n\n      teamGames.forEach((game) => {\n        const week = game.Week;\n        labels.push(`Week ${week}`);\n        const teamElo = game.Home === teamName ? game.ElopreH : game.ElopreA;\n        teamEloRatings.push(teamElo);\n      });\n\n      // Get the main color for the team from the dictionary\n      const color = teamColors[teamName] || getRandomColor();\n\n      // Create a dataset for the team\n      teamDatasets[teamName] = {\n        label: `${teamName}`,\n        data: teamEloRatings,\n        borderColor: color,\n        fill: false,\n      };\n    });\n\n    setTeamEloData({\n      labels: [...new Set(labels)], // Remove duplicates from labels\n      datasets: Object.values(teamDatasets), // Convert the object of datasets to an array\n    });\n  }, []);\n\n  // Function to generate a random color if a team's color is not defined\n  const getRandomColor = () => {\n    const letters = '0123456789ABCDEF';\n    let color = '#';\n    for (let i = 0; i < 6; i++) {\n      color += letters[Math.floor(Math.random() * 16)];\n    }\n    return color;\n  };\n\n  return (\n    <div className='rankings'>\n      <h1>NFL Elo Ratings</h1>\n      <Line\n        data={teamEloData}\n        options={{\n          maintainAspectRatio: false,\n          scales: {\n            x: {\n              grid: {\n                color: 'grey',\n              },\n              beginAtZero: true,\n              max: 'Week 18',\n              ticks: {\n                color: 'black',\n              },\n            },\n            y: {\n              beginAtZero: true,\n              grid: {\n                color: 'grey',\n              },\n              min: 1325, // Set the minimum value for the y-axis\n              max: 1700, // Set the maximum value for the y-axis\n              ticks: {\n                color: 'black',\n                stepSize: 25, // Set the step size for y-axis intervals to 25\n              },\n            },\n          },\n          plugins: {\n            legend: {\n              display: true,\n              labels: {\n                    font: {\n                        size: 14,\n                        family: 'Space Mono',\n                        color: '#000',\n                    }\n                }\n            }\n        }\n        }}\n      />\n    </div>\n  );\n};\n\nexport default Rankings;",{"ruleId":"52","severity":1,"message":"53","line":62,"column":8,"nodeType":"54","endLine":62,"endColumn":31,"suggestions":"55"},{"ruleId":"56","severity":1,"message":"57","line":66,"column":13,"nodeType":"58","endLine":66,"endColumn":17},{"ruleId":"59","severity":1,"message":"60","line":4,"column":8,"nodeType":"61","messageId":"62","endLine":4,"endColumn":13},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'calculateParlayOdds'. Either include it or remove the dependency array.","ArrayExpression",["63"],"jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","JSXOpeningElement","no-unused-vars","'Chart' is defined but never used.","Identifier","unusedVar",{"desc":"64","fix":"65"},"Update the dependencies array to be: [calculateParlayOdds, selectedWinners, week]",{"range":"66","text":"67"},[2163,2186],"[calculateParlayOdds, selectedWinners, week]"]