[{"/Users/sebygarza/portfolio/eggmodels/src/index.js":"1","/Users/sebygarza/portfolio/eggmodels/src/App.js":"2","/Users/sebygarza/portfolio/eggmodels/src/reportWebVitals.js":"3","/Users/sebygarza/portfolio/eggmodels/src/components/Content.js":"4","/Users/sebygarza/portfolio/eggmodels/src/components/NavBar.js":"5","/Users/sebygarza/portfolio/eggmodels/src/components/Blog.js":"6","/Users/sebygarza/portfolio/eggmodels/src/components/ScheduleNFL.js":"7","/Users/sebygarza/portfolio/eggmodels/src/components/Parlay.js":"8"},{"size":535,"mtime":1694630266237,"results":"9","hashOfConfig":"10"},{"size":416,"mtime":1695076250035,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":1694630266238,"results":"12","hashOfConfig":"10"},{"size":430,"mtime":1695451629831,"results":"13","hashOfConfig":"10"},{"size":843,"mtime":1695451495679,"results":"14","hashOfConfig":"10"},{"size":1632,"mtime":1695278224217,"results":"15","hashOfConfig":"10"},{"size":3207,"mtime":1695360385989,"results":"16","hashOfConfig":"10"},{"size":5132,"mtime":1695709460010,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"thvjfa",{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},"/Users/sebygarza/portfolio/eggmodels/src/index.js",[],[],"/Users/sebygarza/portfolio/eggmodels/src/App.js",[],[],"/Users/sebygarza/portfolio/eggmodels/src/reportWebVitals.js",[],[],"/Users/sebygarza/portfolio/eggmodels/src/components/Content.js",[],[],"/Users/sebygarza/portfolio/eggmodels/src/components/NavBar.js",[],[],"/Users/sebygarza/portfolio/eggmodels/src/components/Blog.js",[],[],"/Users/sebygarza/portfolio/eggmodels/src/components/ScheduleNFL.js",[],[],"/Users/sebygarza/portfolio/eggmodels/src/components/Parlay.js",["43","44"],[],"import React, { useState, useEffect } from 'react';\nimport '../Parlay.css';\nimport nflScheduleData from '../python/nflModel.json';\n\nconst Parlay = ({ activeTab }) => {\n    const [selectedWinners, setSelectedWinners] = useState([]);\n    const [week, setWeek] = useState(3); // Set the default week to 3, you can change it as needed.\n\n    // Function to handle winner selection for a game\n    // Function to handle winner selection for a game\n    const handleWinnerSelection = (gameId, team, index) => {\n        setSelectedWinners((prevSelectedWinners) => {\n            const updatedWinners = [...prevSelectedWinners];\n            updatedWinners[index] = updatedWinners[index]?.team === team ? null : { gameId, team };\n            return updatedWinners;\n        });\n    };\n\n    const calculateParlayOdds = () => {\n        let odds = 1;\n\n        for (let index = 0; index < selectedWinners.length; index++) {\n            const selection = selectedWinners[index];\n            if (selection) {\n                const { team } = selection;\n                const game = nflScheduleData.find(\n                    (game) => game.Week === week && (team === game.Away || team === game.Home)\n                );\n                if (game) {\n                    odds *= team === game.Away ? game.probA : game.probH;\n                }\n            }\n        }\n\n        if (odds <= 0.5) {\n            odds = (100 / odds) - 100;\n        }\n        else if (odds === 1) {\n            return null\n        }\n        else {\n            odds = -(odds * 100) / (1 - odds);\n        }\n\n        return Math.round(odds);\n    };\n\n    // Add an effect to recalculate odds when selectedWinners or week changes\n    useEffect(() => {\n        // Call calculateParleyOdds to recalculate odds when selectedWinners or week changes\n        const odds = calculateParlayOdds();\n        // Update the odds in your application as needed (e.g., send it to a server or update a state variable).\n        // For now, we'll just log it.\n        console.log(odds);\n    }, [selectedWinners, week]);\n\n    return (\n        <div className='parley'>\n            <h1></h1>\n            <select\n                value={week}\n                onChange={(e) => setWeek(Number(e.target.value))}\n            >\n                {Array.from({ length: 3 }, (_, i) => (\n                    <option key={i} value={i + 1}>\n                        Week {i + 1}\n                    </option>\n                ))}\n            </select>\n\n            <h3>Selected Winners:</h3>\n\n            <ul className='selected-winners'>\n                {selectedWinners\n                    .filter(selection => selection) // Filter out null or undefined entries\n                    .map((selection, index) => (\n                        <li key={index}>\n                            {selection.team}\n                        </li>\n                    ))}\n            </ul>\n\n\n            <h3>Fair Odds: {calculateParlayOdds()}</h3>\n\n\n            <div className='parley-container'>\n            <table className=\"games-table\">\n                {nflScheduleData\n                    .filter((game) => game.Week === week)\n                    .map((game, index) => (\n                    <tr key={index}>\n                        <td className=\"left-column\">\n                        <input\n                            type=\"checkbox\"\n                            value={game.Away}\n                            onChange={() => handleWinnerSelection(game.id, game.Away, index)}\n                            checked={\n                            selectedWinners[index] &&\n                            selectedWinners[index].gameId === game.id &&\n                            selectedWinners[index].team === game.Away\n                            }\n                        />\n                        <img\n                            className=\"team-logo\"\n                            src={require(`../logosnfl/${game.Away}.png`)}\n                            alt={`${game.Away} Logo`}\n                        />\n                        {game.Away}\n                        </td>\n                        <td className=\"separator\">@</td>\n                        <td className=\"right-column\">\n                        <img\n                            className=\"team-logo\"\n                            src={require(`../logosnfl/${game.Home}.png`)}\n                            alt={`${game.Home} Logo`}\n                        />\n                        {game.Home}\n                        <input\n                            type=\"checkbox\"\n                            value={game.Home}\n                            onChange={() => handleWinnerSelection(game.id, game.Home, index)}\n                            checked={\n                            selectedWinners[index] &&\n                            selectedWinners[index].gameId === game.id &&\n                            selectedWinners[index].team === game.Home\n                            }\n                        />\n                        </td>\n                    </tr>\n                    ))}\n                </table>\n                </div>\n\n            </div>\n    );\n};\n\nexport default Parlay;\n",{"ruleId":"45","severity":1,"message":"46","line":55,"column":8,"nodeType":"47","endLine":55,"endColumn":31,"suggestions":"48"},{"ruleId":"49","severity":1,"message":"50","line":59,"column":13,"nodeType":"51","endLine":59,"endColumn":17},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'calculateParlayOdds'. Either include it or remove the dependency array.","ArrayExpression",["52"],"jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","JSXOpeningElement",{"desc":"53","fix":"54"},"Update the dependencies array to be: [calculateParlayOdds, selectedWinners, week]",{"range":"55","text":"56"},[2021,2044],"[calculateParlayOdds, selectedWinners, week]"]